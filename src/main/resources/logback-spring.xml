<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 콘솔에 출력 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 파일에 출력 -->
    <property name="LOG_HOME" value="${user.home}/app/logs"/>
    <!--<property name="LOG_HOME" value="C:/Users/user/logs"/>-->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/log.txt</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</pattern>
        </encoder>

        <!-- 일자별로 로그파일 적용하기 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/log_%d{yyyyMMdd, UTC}_%i.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>500MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>7</maxHistory> <!-- 일자별 백업파일의 보관기간 -->
        </rollingPolicy>
    </appender>

    <!-- 정의된 appender(파일 혹은 표준 출력)에 로그를 남기겠다 -->
    <springProfile name="local">
        <root level="info">
<!--            <appender-ref ref="ROLLING" />-->
            <appender-ref ref="STDOUT" />
        </root>
    </springProfile>
    <springProfile name="dev">
        <root level="info">
            <appender-ref ref="ROLLING" />
            <appender-ref ref="STDOUT" />
        </root>
    </springProfile>
    <springProfile name="stage">
        <root level="info">
            <appender-ref ref="ROLLING" />
            <appender-ref ref="STDOUT" />
        </root>
    </springProfile>
    <springProfile name="real">
        <root level="warn">
            <appender-ref ref="ROLLING" />
<!--            <appender-ref ref="STDOUT" />-->
        </root>
    </springProfile>

    <!--HTTP 및 REST 통신 관련 로깅, HttpLogger에 등록한 조건(level)에 따라 리퀘스트 URL, 헤더, 바디, 리스폰스를 살펴볼 수 있음-->
    <logger name="com.mylo.process.rest.util" level="INFO" />
    <!--마이바티스 플러그인(BindingLog 등) 관련 로깅, 쿼리의 정보를 살펴볼 수 있음-->
    <logger name="java.sql" level="trace" />
    <logger name="jdbc" level="OFF" /> <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
    <logger name="jdbc.connection" level="OFF" /> <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
    <logger name="jdbc.sqlonly" level="INFO" /> <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
    <logger name="jdbc.sqltiming" level="OFF" /> <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
    <logger name="jdbc.audit" level="OFF" /> <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultset" level="OFF" /> <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    <logger name="jdbc.resultsettable" level="INFO" />
    <!--프로젝트가 실행된 정보(자바 버전, IP, PID 및 현재 스프링 프로필) 및 프로젝트가 Deploy된 시간을 표시함-->
    <logger name="@gradle.project.ext.mainClassName@" level="info" />
</configuration>